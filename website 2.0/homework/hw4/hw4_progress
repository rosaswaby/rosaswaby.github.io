

varying vec3 vPos;                             // Position in image
uniform float uTime;                           // Time

struct Light {                                 // Light source data.
   vec3 direction;
   vec3 color;
};

struct Material {                              // Surface material data.
   vec3  ambient;
   vec3  diffuse;
   vec3  specular;
   float power;
};

struct Sphere {                                // Sphere object data.
   vec3     center;
   float    radius;
   Material material;
};

uniform Light uLights[NLIGHTS];                // All the lights.
uniform Sphere uSpheres[NSPHERES];             // All the spheres.

vec2 raytraceSphere(vec3 V, vec3 W, Sphere S) {
   V -= S.center;
   float B = 2. * dot(V, W);
   float C = dot(V, V) - S.radius * S.radius;
   float discrim = B*B - 4.*C;
   vec2 t = vec2(1000., 1000.);
   if (discrim > 0.)
      t = vec2(-B - discrim, -B + discrim) / 2.;
   return t.x > 0. ? t : vec2(1000., 1000.);
}

vec3 backgroundColor(vec3 dir) {
   float t = .0 - .6 * dir.y;
   return mix(vec3(.7,.13,.2), vec3(.2,.01,.1), 1. - t * t);

}

vec3 phong(vec3 P, vec3 N, vec3 E, Material C) {
   vec3 c = C.ambient * backgroundColor(N);            // Ambient color
   for (int i = 0 ; i < NLIGHTS ; i++) { // Loop through lights
      vec3 rand = vec3(5.,5.,5.);
      float r = noise(rand);
      vec3 L = normalize(uLights[i].direction);
      vec2 t;
      float d = max(0., dot(N, L));                     // Diffuse value
      vec3  R = reflect(-L, N);
      float s = pow(max(0., dot(E, R)), C.power);       // Specular value
      c *= 1.5 + r * tan(7. * vec3(1.,2.,1.)) * turbulence(vec3(.4, 7., 5. * uTime));


   }
   return c;
}

Material C;
vec3 V, W, P, E, N;

bool raytrace() {
   float distance = 1000.;
   for (int i = 0 ; i < NSPHERES ; i++) {
      vec2 t = raytraceSphere(V, W, uSpheres[i]);
      if (t.x < distance) {
         C = uSpheres[i].material;                // Material for this object
         P = V + t.x * W;                         // Point on sphere
         E = -normalize(P);                       // Direction to eye
         N = normalize(P - uSpheres[i].center);   // Surface normal
         distance = t.x;
      }
   }
   return distance < 1000.;
}

void main() {
   vec3 c = vec3(0.,0.,0.);

   V = vec3(0.,0.,0.);                         // Ray origin
   W = normalize(vec3(vPos.xy, -3.));          // Ray direction
   if (! raytrace())
      c = backgroundColor(vPos);
   else
      for (int bounce = 0 ; bounce < 1 ; bounce++) {
         float attenuation = pow(0.6, float(bounce + 1));
         c += attenuation * phong(P, N, E, C);
         c += .5 * attenuation * backgroundColor(W);
         V = P + .001 * W;
         W = reflect(W, N);
         if (! raytrace())
            break;
      }

   gl_FragColor = vec4(sqrt(c), 1.);           // Final pixel color
}
