

varying vec3 vPos;                               // Position in image
uniform float uTime;                             // Time

vec2 raytraceSphere(vec3 V, vec3 W, vec4 S) {
   V -= S.xyz;
   float B = 2. * dot(V, W);
   float C = dot(V, V) - S.w * S.w;
   float discrim = B*B - 4.*C;
   return discrim < 0. ? vec2(1000., 1000.)
                       : vec2(-B - discrim, -B + discrim) / 2.;
}

vec3 phong(vec3 N, vec3 E, vec3 A, vec3 D, vec4 S, vec3 P, vec4 sph) {
   vec3 c = A;                                 // Ambient color
   for (int i = 0 ; i < uLDirs_length ; i++) { // Loop through lights
     // V' origin of the ray --> S surface point + (ε) slight margin
     // W direction of the light source --> light source (Li)

      vec3 LDir = normalize(uLDirs[i]);

      //for each light source shoot a ray from the surface in the direction of that light source
      // shadow ray: [ V' , W' ] = [ S + ε , Li ]
      // find surface point on sphere

      for (int j = 0 ; j < uSpheres_length; j++) {

       vec2 t2 = raytraceSphere(P + .001 * LDir, LDir, uSpheres[j]);
       if(t2.x < 1000.){
        break;
       }
       if(t2.x == 1000.){
        float d = max(0., dot(N, LDir));           // Diffuse value
        vec3 R = 2. * dot(N, LDir) * N - LDir;     // Reflection dir
        float s = pow(max(0., dot(E, R)), S.a);    // Specular value
        c += uLColors[j] * (d * D + s* S.rgb * .1*S.a);
       }
     }

   }
   return c;
}

void main() {
   vec3 c = vec3(.01,.01,.03);                   // Dark background

   vec3 V = vec3(0.,0.,0.);                      // Ray origin
   vec3 W = normalize(vec3(vPos.xy, -3.));       // Ray direction
   vec3 E = -W;                                  // Direction to eye
   float distance = 1000.;
   for (int i = 0 ; i < 2 ; i++) {
      vec4 S = uSpheres[i];
      vec2 t = raytraceSphere(V, W, S);             // Trace sphere
      if (t.x < distance) {
         distance = t.x;
         vec3 P = V + t.x * W;                      // Point on sphere
         vec3 N = normalize(P - S.xyz);             // Surface normal
         c = phong(N, E, vec3(.1,.1,.4),
     	                   vec3(.5,.5,.5),
     			               vec4(.5,.5,.5,10.),P, S);
      }
   }

   gl_FragColor = vec4(sqrt(c), 1.);             // Final pixel color
}
